#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/i2c-dev.h>
#include <linux/i2c.h>
#include <stdint.h>

#define TCS34725_ADDR  0x29  // Dirección I2C del sensor
#define COMMAND_BIT    0x80  // Bit de comando para acceder a registros
#define ENABLE_REG     0x00  // Registro de control
#define ATIME_REG      0x01  // Tiempo de integración
#define CONTROL_REG    0x0F  // Configuración de ganancia
#define CDATAL_REG     0x14  // Datos de color

int i2c_write(int fd, uint8_t reg, uint8_t value) {
    uint8_t buffer[2] = {COMMAND_BIT | reg, value};
    struct i2c_msg msg = {TCS34725_ADDR, 0, 2, buffer};
    struct i2c_rdwr_ioctl_data ioctl_data = {&msg, 1};
    return ioctl(fd, I2C_RDWR, &ioctl_data);
}

int i2c_read(int fd, uint8_t reg, uint8_t *data, uint8_t length) {
    uint8_t reg_buffer = COMMAND_BIT | reg;
    struct i2c_msg messages[2] = {
        {TCS34725_ADDR, 0, 1, &reg_buffer},
        {TCS34725_ADDR, I2C_M_RD, length, data}
    };
    struct i2c_rdwr_ioctl_data ioctl_data = {messages, 2};
    return ioctl(fd, I2C_RDWR, &ioctl_data);
}

int main() {
    int fd;
    char *i2c_file = "/dev/i2c-1";
    uint8_t data[8];

    // Abrir bus I2C
    if ((fd = open(i2c_file, O_RDWR)) < 0) {
        perror("Error al abrir el bus I2C");
        return 1;
    }

    // Seleccionar el dispositivo
    if (ioctl(fd, I2C_SLAVE, TCS34725_ADDR) < 0) {
        perror("No se pudo conectar con el sensor");
        close(fd);
        return 1;
    }

    // Habilitar el sensor (PON y AEN)
    i2c_write(fd, ENABLE_REG, 0x03);
    
    // Configurar tiempo de integración (101 ms)
    i2c_write(fd, ATIME_REG, 0xD5);
    
    // Configurar ganancia (4x)
    i2c_write(fd, CONTROL_REG, 0x01);
    while(1){
        // Esperar integración
        sleep(1);
    
        // Leer datos de color
        if (i2c_read(fd, CDATAL_REG, data, 8) < 0) {
            perror("Error al leer datos del sensor");
            close(fd);
            return 1;
        }
    
        // Convertir datos
        uint16_t clear = (data[1] << 8) | data[0];
        uint16_t red   = (data[3] << 8) | data[2];
        uint16_t green = (data[5] << 8) | data[4];
        uint16_t blue  = (data[7] << 8) | data[6];
    
        printf("Clear: %d\n", clear);
        printf("Red:   %d\n", red);
        printf("Green: %d\n", green);
        printf("Blue:  %d\n", blue);
    }
    close(fd);
    return 0;
}
